// <auto-generated />
using EconDataLens.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EconDataLens.Data.Migrations
{
    [DbContext(typeof(EconDataLensDbContext))]
    partial class EconDataLensDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EconDataLens.Core.Entities.Cpi.CpiArea", b =>
                {
                    b.Property<string>("AreaCode")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("area_code");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("area_name");

                    b.HasKey("AreaCode")
                        .HasName("pk_cpi_area");

                    b.ToTable("cpi_area", (string)null);
                });

            modelBuilder.Entity("EconDataLens.Core.Entities.Cpi.CpiData", b =>
                {
                    b.Property<string>("SeriesId")
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("series_id");

                    b.Property<int>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.Property<string>("Period")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("period");

                    b.Property<string>("FootnoteCodes")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("footnote_codes");

                    b.Property<decimal>("Value")
                        .HasMaxLength(12)
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("SeriesId", "Year", "Period")
                        .HasName("pk_cpi_data");

                    b.HasIndex("Period")
                        .HasDatabaseName("ix_cpi_data_period");

                    b.ToTable("cpi_data", (string)null);
                });

            modelBuilder.Entity("EconDataLens.Core.Entities.Cpi.CpiFootnote", b =>
                {
                    b.Property<string>("FootnoteCode")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("footnote_code");

                    b.Property<string>("FootnoteText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("footnote_text");

                    b.HasKey("FootnoteCode")
                        .HasName("pk_cpi_footnote");

                    b.ToTable("cpi_footnote", (string)null);
                });

            modelBuilder.Entity("EconDataLens.Core.Entities.Cpi.CpiItem", b =>
                {
                    b.Property<string>("ItemCode")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("item_code");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("item_name");

                    b.HasKey("ItemCode")
                        .HasName("pk_cpi_item");

                    b.ToTable("cpi_item", (string)null);
                });

            modelBuilder.Entity("EconDataLens.Core.Entities.Cpi.CpiPeriod", b =>
                {
                    b.Property<string>("Period")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("period");

                    b.Property<string>("PeriodAbbreviation")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)")
                        .HasColumnName("period_abbreviation");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("period_name");

                    b.HasKey("Period")
                        .HasName("pk_cpi_period");

                    b.ToTable("cpi_period", (string)null);
                });

            modelBuilder.Entity("EconDataLens.Core.Entities.Cpi.CpiSeries", b =>
                {
                    b.Property<string>("SeriesId")
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)")
                        .HasColumnName("series_id");

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("area_code");

                    b.Property<string>("BaseCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("base_code");

                    b.Property<string>("BasePeriod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("base_period");

                    b.Property<string>("BeginPeriod")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("begin_period");

                    b.Property<int>("BeginYear")
                        .HasMaxLength(4)
                        .HasColumnType("integer")
                        .HasColumnName("begin_year");

                    b.Property<string>("EndPeriod")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("end_period");

                    b.Property<int>("EndYear")
                        .HasMaxLength(4)
                        .HasColumnType("integer")
                        .HasColumnName("end_year");

                    b.Property<string>("FootnoteCodes")
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("footnote_codes");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("item_code");

                    b.Property<string>("PeriodicityCode")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("periodicity_code");

                    b.Property<string>("Seasonal")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("seasonal");

                    b.Property<string>("SeriesTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("series_title");

                    b.HasKey("SeriesId")
                        .HasName("pk_cpi_series");

                    b.HasIndex("AreaCode")
                        .HasDatabaseName("ix_cpi_series_area_code");

                    b.HasIndex("BeginPeriod")
                        .HasDatabaseName("ix_cpi_series_begin_period");

                    b.HasIndex("EndPeriod")
                        .HasDatabaseName("ix_cpi_series_end_period");

                    b.HasIndex("ItemCode")
                        .HasDatabaseName("ix_cpi_series_item_code");

                    b.ToTable("cpi_series", (string)null);
                });

            modelBuilder.Entity("EconDataLens.Core.Entities.Cpi.CpiData", b =>
                {
                    b.HasOne("EconDataLens.Core.Entities.Cpi.CpiPeriod", null)
                        .WithMany()
                        .HasForeignKey("Period")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cpi_data_cpi_period_period");

                    b.HasOne("EconDataLens.Core.Entities.Cpi.CpiSeries", null)
                        .WithMany()
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cpi_data_cpi_series_series_id");
                });

            modelBuilder.Entity("EconDataLens.Core.Entities.Cpi.CpiSeries", b =>
                {
                    b.HasOne("EconDataLens.Core.Entities.Cpi.CpiArea", null)
                        .WithMany()
                        .HasForeignKey("AreaCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cpi_series_cpi_area_area_code");

                    b.HasOne("EconDataLens.Core.Entities.Cpi.CpiPeriod", null)
                        .WithMany()
                        .HasForeignKey("BeginPeriod")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cpi_series_cpi_period_begin_period");

                    b.HasOne("EconDataLens.Core.Entities.Cpi.CpiPeriod", null)
                        .WithMany()
                        .HasForeignKey("EndPeriod")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cpi_series_cpi_period_end_period");

                    b.HasOne("EconDataLens.Core.Entities.Cpi.CpiItem", null)
                        .WithMany()
                        .HasForeignKey("ItemCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cpi_series_cpi_item_item_code");
                });
#pragma warning restore 612, 618
        }
    }
}
